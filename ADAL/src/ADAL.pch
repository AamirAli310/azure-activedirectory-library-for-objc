// Copyright Â© Microsoft Open Technologies, Inc.
//
// All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
// OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
// ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
// PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
//
// See the Apache License, Version 2.0 for the specific language
// governing permissions and limitations under the License.


//
//  Prefix header
//
//  The contents of this file are implicitly included at the beginning of every source file.
//

#ifdef __OBJC__
    #import <Foundation/Foundation.h>

#if TARGET_OS_IPHONE
    #import <UIKit/UIKit.h>
#else
    #import <AppKit/AppKit.h>
#endif


#ifndef DebugLog
#ifdef DEBUG
#   define DebugLog(fmt, ...) NSLog((@"%s[%d][%@] " fmt), __PRETTY_FUNCTION__, __LINE__, [[NSThread currentThread] isEqual:[NSThread mainThread]] ? @"main" : @"work", ##__VA_ARGS__);
#else
#   define DebugLog(...)
#endif
#endif

#if __has_include("../../../aad_overrides.h")
#include "../../../aad_overrides.h"
#endif


#if !defined(__clang__) || __clang_major__ < 3
#   ifndef __bridge
#       define __bridge
#   endif

#   ifndef __bridge_retain
#       define __bridge_retain
#   endif

#   ifndef __bridge_retained
#       define __bridge_retained
#   endif

#   ifndef __bridge_transfer
#       define __bridge_transfer
#   endif

#   ifndef __autoreleasing
#       define __autoreleasing
#   endif

#   ifndef __strong
#       define __strong
#   endif

#   ifndef __unsafe_unretained
#       define __unsafe_unretained
#   endif

#   ifndef __weak
#       define __weak
#   endif
#endif

#if __has_feature(objc_arc)
#   define SAFE_ARC_PROP_RETAIN strong
#   define SAFE_ARC_RETAIN(x) (x)
#   define SAFE_ARC_RELEASE(x)
#   define SAFE_ARC_AUTORELEASE(x) (x)
#   define SAFE_ARC_BLOCK_COPY(x) (x)
#   define SAFE_ARC_BLOCK_RELEASE(x)
#   define SAFE_ARC_SUPER_DEALLOC()
#   define SAFE_ARC_AUTORELEASE_POOL_START() @autoreleasepool {
#   define SAFE_ARC_AUTORELEASE_POOL_END() }
#   define SAFE_ARC_DISPATCH_RETAIN(x)
#   define SAFE_ARC_DISPATCH_RELEASE(x)
#else
#   define SAFE_ARC_PROP_RETAIN retain
#   define SAFE_ARC_RETAIN(x) ([(x) retain])
#   define _SAFE_ARC_RELEASE(x) ([(x) release])
#   define SAFE_ARC_AUTORELEASE(x) ([(x) autorelease])
#   define SAFE_ARC_BLOCK_COPY(x) (Block_copy(x))
#   define SAFE_ARC_BLOCK_RELEASE(x) (Block_release(x))
#   define SAFE_ARC_SUPER_DEALLOC() ([super dealloc])
#   define SAFE_ARC_AUTORELEASE_POOL_START() NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
#   define SAFE_ARC_AUTORELEASE_POOL_END() [pool release];
#   define SAFE_ARC_DISPATCH_RETAIN(x) dispatch_retain((x))
#   define SAFE_ARC_DISPATCH_RELEASE(x) dispatch_release((x))
# ifdef DEBUG
//Crash the application if messages are sent to the released variable, but only in DEBUG mode
#   define SAFE_ARC_RELEASE(x) { _SAFE_ARC_RELEASE(x); (x) = (id)nil; }
# else
//Set the variable to nil in release mode to avoid crashing, as obj-c allows sending messages to nil pointers:
#   define SAFE_ARC_RELEASE(x) { _SAFE_ARC_RELEASE(x); (x) = nil; }
# endif
#endif


#endif
